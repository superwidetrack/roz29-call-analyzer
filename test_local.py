#!/usr/bin/env python3
"""
–õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –∑–≤–æ–Ω–∫–æ–≤.
"""
import os
import asyncio
from datetime import datetime
from dotenv import load_dotenv
from prompt_loader import prompt_loader
from main import analyze_with_gpt, send_telegram_report

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_prompt_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–º–ø—Ç–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–º–ø—Ç–æ–≤...")
    
    # –¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
    test_transcript = """
    –ú–µ–Ω–µ–¥–∂–µ—Ä: –ê–ª–ª–æ, —Å–∞–ª–æ–Ω —Ü–≤–µ—Ç–æ–≤ 29ROZ, —Å–ª—É—à–∞—é –≤–∞—Å.
    –ö–ª–∏–µ–Ω—Ç: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –º–Ω–µ –Ω—É–∂–µ–Ω –±—É–∫–µ—Ç –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è.
    –ú–µ–Ω–µ–¥–∂–µ—Ä: –ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ?
    –ö–ª–∏–µ–Ω—Ç: –î–æ 3000 —Ä—É–±–ª–µ–π.
    –ú–µ–Ω–µ–¥–∂–µ—Ä: –£ –Ω–∞—Å –µ—Å—Ç—å –∫—Ä–∞—Å–∏–≤—ã–µ —Ä–æ–∑—ã, 15 —à—Ç—É–∫ –∑–∞ 2800.
    –ö–ª–∏–µ–Ω—Ç: –ê —Ö—Ä–∏–∑–∞–Ω—Ç–µ–º—ã –µ—Å—Ç—å?
    –ú–µ–Ω–µ–¥–∂–µ—Ä: –•—Ä–∏–∑–∞–Ω—Ç–µ–º –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.
    –ö–ª–∏–µ–Ω—Ç: –ù—É —Ç–æ–≥–¥–∞ —Å–ø–∞—Å–∏–±–æ, –¥–æ —Å–≤–∏–¥–∞–Ω–∏—è.
    """
    
    # –¢–µ—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–≤–æ–Ω–∫–µ
    test_call_info = {
        'duration': 45,
        'time': '2024-01-15 14:30',
        'direction': '–≤—Ö–æ–¥—è—â–∏–π'
    }
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
    full_prompt = prompt_loader.get_full_analysis_prompt(test_transcript.strip(), test_call_info)
    
    print(f"‚úÖ –ü—Ä–æ–º–ø—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞: {len(full_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
    print("üìù –ù–∞—á–∞–ª–æ –ø—Ä–æ–º–ø—Ç–∞:")
    print(full_prompt[:500] + "...")
    return True

async def test_full_analysis(transcript, call_info=None):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–≤–æ–Ω–∫–∞"""
    print("\nü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–≤–æ–Ω–∫–∞...")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é GPT-4
    analysis = analyze_with_gpt(transcript, call_info)
    
    if not analysis:
        print("‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è")
        return None
        
    print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω ({len(analysis)} —Å–∏–º–≤–æ–ª–æ–≤)")
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê:")
    print("-" * 50)
    print(analysis)
    print("-" * 50)
    
    return analysis

async def test_telegram_report(analysis, call_info=None):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–∞ –≤ Telegram"""
    print("\nüì± –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram...")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    call_type_emoji = "üìû"
    if "–ü–†–û–î–ê–ñ–ê" in analysis:
        if "–ó–ê–ö–ê–ó –û–§–û–†–ú–õ–ï–ù" in analysis:
            call_type_emoji = "üü¢ –£–°–ü–ï–®–ù–ê–Ø –ü–†–û–î–ê–ñ–ê"
        else:
            call_type_emoji = "üî¥ –ù–ï–£–î–ê–ß–ù–ê–Ø –ü–†–û–î–ê–ñ–ê"
    elif "–õ–û–ì–ò–°–¢–ò–ö–ê" in analysis:
        call_type_emoji = "üöö –õ–û–ì–ò–°–¢–ò–ö–ê"
    elif "–ü–û–î–î–ï–†–ñ–ö–ê" in analysis:
        call_type_emoji = "üõ†Ô∏è –ü–û–î–î–ï–†–ñ–ö–ê"
    elif "–ù–ï–î–û–ó–í–û–ù" in analysis or "–û–®–ò–ë–ö–ê" in analysis:
        call_type_emoji = "‚ùå –ù–ï–î–û–ó–í–û–ù/–û–®–ò–ë–ö–ê"
    elif "–î–†–£–ì–û–ï" in analysis:
        call_type_emoji = "üìã –î–†–£–ì–û–ï"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–æ–≤–æ–º –∑–≤–æ–Ω–∫–µ
    moscow_time_str = datetime.now().strftime("%d.%m.%Y %H:%M MSK")
    
    final_report = f"""{call_type_emoji}

üìû **–ó–≤–æ–Ω–æ–∫:** –¢–ï–°–¢–û–í–´–ô –õ–û–ö–ê–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö
üóìÔ∏è **–î–∞—Ç–∞:** {moscow_time_str}
‚è±Ô∏è **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {call_info.get('duration', 'N/A') if call_info else 'N/A'} —Å–µ–∫
üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –¢–ï–°–¢

---

{analysis}

---
*üß™ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã 29ROZ Call Analyzer*
**ID —Ç–µ—Å—Ç–∞:** `LOCAL_TEST_{int(datetime.now().timestamp())}`"""

    print("üìù –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢:")
    print(final_report)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    telegram_success = await send_telegram_report(final_report)
    
    if telegram_success:
        print("‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram!")
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=== üß™ –õ–û–ö–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ê–ù–ê–õ–ò–ó–ê –ó–í–û–ù–ö–û–í ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    required_env_vars = ["OPENAI_API_KEY", "TELEGRAM_BOT_TOKEN", "TELEGRAM_CHAT_ID"]
    missing_vars = [var for var in required_env_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ .env —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏")
        return
    
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    # –®–∞–≥ 1: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–º–ø—Ç–æ–≤
    if not test_prompt_system():
        print("‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –ø—Ä–æ–º–ø—Ç–æ–≤")
        return
    
    # –ñ–¥–µ–º –≤–≤–æ–¥–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\n" + "="*60)
    print("üìù –í–í–ï–î–ò–¢–ï –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–Æ –ó–í–û–ù–ö–ê –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("(–í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–≤–∞–∂–¥—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)")
    print("="*60)
    
    transcript_lines = []
    empty_lines = 0
    
    while True:
        try:
            line = input()
            if line.strip():
                transcript_lines.append(line)
                empty_lines = 0
            else:
                empty_lines += 1
                if empty_lines >= 2 or not transcript_lines:  # –î–≤–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –ø–µ—Ä–≤–∞—è –ø—É—Å—Ç–∞—è
                    break
        except KeyboardInterrupt:
            print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return
        except EOFError:
            break
    
    if not transcript_lines:
        print("‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –≤–≤–µ–¥–µ–Ω–∞")
        return
    
    transcript = "\n".join(transcript_lines)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–æ–≤–æ–º –∑–≤–æ–Ω–∫–µ
    test_call_info = {
        'duration': len(transcript) // 10,  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        'time': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        'direction': '–≤—Ö–æ–¥—è—â–∏–π'
    }
    
    print(f"\n‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è ({len(transcript)} —Å–∏–º–≤–æ–ª–æ–≤)")
    
    # –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–≤–æ–Ω–æ–∫
    analysis = await test_full_analysis(transcript, test_call_info)
    
    if not analysis:
        print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    success = await test_telegram_report(analysis, test_call_info)
    
    if success:
        print("\nüéâ –õ–û–ö–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û!")
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")

if __name__ == "__main__":
    asyncio.run(main())