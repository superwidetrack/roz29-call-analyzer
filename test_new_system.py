#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
"""
import os
import asyncio
import json
from datetime import datetime
from dotenv import load_dotenv
from prompt_loader import prompt_loader
from main import analyze_with_gpt_new, send_telegram_report

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def test_new_critical_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∑–≤–æ–Ω–∫–æ–≤"""
    print("=== üö® –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–û–ô –°–ò–°–¢–ï–ú–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –û–®–ò–ë–û–ö ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    required_env_vars = ["OPENAI_API_KEY", "TELEGRAM_BOT_TOKEN", "TELEGRAM_CHAT_ID"]
    missing_vars = [var for var in required_env_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        return
    
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
    print("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã...")
    prompt_loader.reload_prompts()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–≤–æ–Ω–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    test_calls = [
        {
            "name": "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê M1",
            "transcript": """
            –ö–ª–∏–µ–Ω—Ç: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –º–Ω–µ –Ω—É–∂–µ–Ω –±—É–∫–µ—Ç —Ö—Ä–∏–∑–∞–Ω—Ç–µ–º –¥–ª—è –º–∞–º—ã.
            –ú–µ–Ω–µ–¥–∂–µ—Ä: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ö—Ä–∏–∑–∞–Ω—Ç–µ–º —É –Ω–∞—Å —Å–µ–π—á–∞—Å –Ω–µ—Ç.
            –ö–ª–∏–µ–Ω—Ç: –ê —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å?
            –ú–µ–Ω–µ–¥–∂–µ—Ä: –†–æ–∑—ã –µ—Å—Ç—å –∫—Ä–∞—Å–∏–≤—ã–µ.
            –ö–ª–∏–µ–Ω—Ç: –ù–µ, –º–Ω–µ –∏–º–µ–Ω–Ω–æ —Ö—Ä–∏–∑–∞–Ω—Ç–µ–º—ã –Ω—É–∂–Ω—ã. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è.
            –ú–µ–Ω–µ–¥–∂–µ—Ä: –î–æ —Å–≤–∏–¥–∞–Ω–∏—è.
            """,
            "expected": "alert",
            "description": "–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–æ–≤–∞—Ä–∞"
        },
        {
            "name": "‚úÖ –£–°–ü–ï–®–ù–ê–Ø –ü–†–û–î–ê–ñ–ê",  
            "transcript": """
            –ú–µ–Ω–µ–¥–∂–µ—Ä: 29ROZ, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
            –ö–ª–∏–µ–Ω—Ç: –ù—É–∂–µ–Ω –±—É–∫–µ—Ç —Ä–æ–∑ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è.
            –ú–µ–Ω–µ–¥–∂–µ—Ä: –ö–æ–Ω–µ—á–Ω–æ, —Å–∫–æ–ª—å–∫–æ —Ä–æ–∑ –∏ –∫–∞–∫–æ–π –±—é–¥–∂–µ—Ç?
            –ö–ª–∏–µ–Ω—Ç: 21 —Ä–æ–∑–∞, –¥–æ 4000 —Ä—É–±–ª–µ–π.
            –ú–µ–Ω–µ–¥–∂–µ—Ä: –û—Ç–ª–∏—á–Ω–æ, —É –Ω–∞—Å –µ—Å—Ç—å –±—É–∫–µ—Ç 21 —Ä–æ–∑–∞ –∑–∞ 3800. –û—Ñ–æ—Ä–º–ª—è–µ–º?
            –ö–ª–∏–µ–Ω—Ç: –î–∞, –æ—Ñ–æ—Ä–º–ª—è–µ–º. –ö–æ–≥–¥–∞ –¥–æ—Å—Ç–∞–≤–∫–∞?
            –ú–µ–Ω–µ–¥–∂–µ—Ä: –ó–∞–≤—Ç—Ä–∞ –∫ 18:00. –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –∫—É—Ä—å–µ—Ä–∞?
            –ö–ª–∏–µ–Ω—Ç: 89991234567
            –ú–µ–Ω–µ–¥–∂–µ—Ä: –ü—Ä–∏–Ω—è—Ç–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!
            """,
            "expected": "ignore",
            "description": "–£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ - –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞"
        },
        {
            "name": "üöö –õ–û–ì–ò–°–¢–ò–ö–ê",
            "transcript": """
            –ú–µ–Ω–µ–¥–∂–µ—Ä: –î–æ–±—Ä—ã–π –¥–µ–Ω—å! –≠—Ç–æ 29ROZ, –∑–≤–æ–Ω–∏–º —É—Ç–æ—á–Ω–∏—Ç—å –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏.
            –ö–ª–∏–µ–Ω—Ç: –î–∞, –ø—Ä–∏–≤–µ—Ç!
            –ú–µ–Ω–µ–¥–∂–µ—Ä: –í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤, —É–¥–æ–±–Ω–æ –ª–∏ –∫ 17:00?
            –ö–ª–∏–µ–Ω—Ç: –î–∞, —É–¥–æ–±–Ω–æ. –°–ø–∞—Å–∏–±–æ!
            –ú–µ–Ω–µ–¥–∂–µ—Ä: –û—Ç–ª–∏—á–Ω–æ, –∫—É—Ä—å–µ—Ä –±—É–¥–µ—Ç –∫ 17:00. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!
            """,
            "expected": "ignore", 
            "description": "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∑–≤–æ–Ω–æ–∫ - –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞"
        },
        {
            "name": "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê M3",
            "transcript": """
            –ö–ª–∏–µ–Ω—Ç: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —Ö–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç.
            –ú–µ–Ω–µ–¥–∂–µ—Ä: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–∞–∫–æ–π –±—É–∫–µ—Ç –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?
            –ö–ª–∏–µ–Ω—Ç: 25 —Ä–æ–∑, –∫—Ä–∞—Å–Ω—ã–µ.
            –ú–µ–Ω–µ–¥–∂–µ—Ä: –ï—Å—Ç—å, 4500 —Ä—É–±–ª–µ–π. –ü–æ–¥—Ö–æ–¥–∏—Ç?
            –ö–ª–∏–µ–Ω—Ç: –î–∞, –ø–æ–¥—Ö–æ–¥–∏—Ç. –ê –¥–æ—Å—Ç–∞–≤–∫–∞?
            –ú–µ–Ω–µ–¥–∂–µ—Ä: 500 —Ä—É–±–ª–µ–π, –∑–∞–≤—Ç—Ä–∞ –¥–æ—Å—Ç–∞–≤–∏–º.
            –ö–ª–∏–µ–Ω—Ç: –•–æ—Ä–æ—à–æ, –º–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç.
            –ú–µ–Ω–µ–¥–∂–µ—Ä: –û—Ç–ª–∏—á–Ω–æ! –Ø –≤–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω—é –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º, —É—Ç–æ—á–Ω—é –¥–µ—Ç–∞–ª–∏.
            –ö–ª–∏–µ–Ω—Ç: –•–æ—Ä–æ—à–æ, –∂–¥—É –∑–≤–æ–Ω–∫–∞.
            """,
            "expected": "alert",
            "description": "–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∑–∞–∫—Ä—ã–ª —Å–¥–µ–ª–∫—É –≤ –æ–¥–∏–Ω –∫–æ–Ω—Ç–∞–∫—Ç"
        }
    ]
    
    print(f"\nüß™ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {len(test_calls)} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...")
    
    results = []
    critical_count = 0
    
    for i, test_call in enumerate(test_calls, 1):
        print(f"\n{'='*60}")
        print(f"–¢–ï–°–¢ {i}/4: {test_call['name']}")
        print(f"–û–ü–ò–°–ê–ù–ò–ï: {test_call['description']}")
        print("="*60)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–≤–æ–Ω–æ–∫
        call_info = {
            'duration': 120,
            'time': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'direction': 'incoming'
        }
        
        result = analyze_with_gpt_new(test_call['transcript'].strip(), call_info)
        
        if result:
            status = result.get('status', 'unknown')
            print(f"üìã –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê: status = '{status}'")
            
            if status == 'alert':
                print(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê!")
                print(f"   –ö–æ–¥: {result.get('error_code', 'N/A')}")
                print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {result.get('error_description', 'N/A')}")
                print(f"   –ö–æ–Ω—Ç–µ–∫—Å—Ç: {result.get('context', 'N/A')}")
                print(f"   –†–µ—à–µ–Ω–∏–µ: {result.get('solution', 'N/A')}")
                
                # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç
                alert_template = prompt_loader.get_alert_template()
                test_report = alert_template.format(
                    error_code=result.get('error_code', 'TEST'),
                    error_description=result.get('error_description', 'Test error'),
                    client_phone='TEST_PHONE',
                    context=result.get('context', 'Test context'),
                    solution=result.get('solution', 'Test solution')
                )
                
                print(f"\nüì± –û–¢–ü–†–ê–í–õ–Ø–ï–ú –¢–ï–°–¢–û–í–´–ô –û–¢–ß–Å–¢ –í TELEGRAM...")
                telegram_success = await send_telegram_report(test_report)
                
                if telegram_success:
                    print("‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram!")
                    critical_count += 1
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞")
                    
            elif status == 'ignore':
                print(f"‚úÖ –ó–≤–æ–Ω–æ–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞")
            else:
                print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if status == test_call['expected']:
                print(f"‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –æ–∂–∏–¥–∞–ª—Å—è '{test_call['expected']}', –ø–æ–ª—É—á–µ–Ω '{status}'")
                results.append({"test": test_call['name'], "status": "PASS", "result": status})
            else:
                print(f"‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –æ–∂–∏–¥–∞–ª—Å—è '{test_call['expected']}', –ø–æ–ª—É—á–µ–Ω '{status}'")
                results.append({"test": test_call['name'], "status": "FAIL", "result": status})
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞")
            results.append({"test": test_call['name'], "status": "ERROR", "result": "no_result"})
    
    # –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print(f"\n{'='*80}")
    print("üèÅ –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ù–û–í–û–ô –°–ò–°–¢–ï–ú–´")
    print("="*80)
    
    passed = sum(1 for r in results if r['status'] == 'PASS')
    failed = sum(1 for r in results if r['status'] == 'FAIL')
    errors = sum(1 for r in results if r['status'] == 'ERROR')
    
    print(f"‚úÖ –ü–†–û–ô–î–ï–ù–û: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤")
    print(f"‚ùå –ù–ï –ü–†–û–ô–î–ï–ù–û: {failed}/{len(results)} —Ç–µ—Å—Ç–æ–≤")
    print(f"üí• –û–®–ò–ë–û–ö: {errors}/{len(results)} —Ç–µ—Å—Ç–æ–≤")
    print(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –û–¢–ß–Å–¢–û–í –û–¢–ü–†–ê–í–õ–ï–ù–û: {critical_count}")
    
    print("\n–î–ï–¢–ê–õ–ò:")
    for result in results:
        status_emoji = "‚úÖ" if result['status'] == 'PASS' else "‚ùå" if result['status'] == 'FAIL' else "üí•"
        print(f"{status_emoji} {result['test']} -> {result['result']}")
    
    if passed == len(results):
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
        print("üéØ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã—è–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")
    else:
        print(f"\n‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –í –¢–ï–°–¢–ê–• - –ù–£–ñ–ù–ê –î–û–†–ê–ë–û–¢–ö–ê")

if __name__ == "__main__":
    asyncio.run(test_new_critical_system())