"""
–ú–æ–¥—É–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –∑–≤–æ–Ω–∫–æ–≤.
"""
import os
from pathlib import Path

class PromptLoader:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self, prompts_dir="prompts"):
        self.prompts_dir = Path(prompts_dir)
        self.prompts = {}
        self._load_all_prompts()
    
    def _load_all_prompts(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        prompt_files = {
            'system_context': 'system_context.txt',
            'classification': 'step1_classification.txt', 
            'manager_codes': 'manager_fault_codes.txt',
            'detailed_analysis': 'step2_detailed_analysis.txt',
            'final_instructions': 'final_instructions.txt'
        }
        
        for key, filename in prompt_files.items():
            self.prompts[key] = self._load_prompt(filename)
    
    def _load_prompt(self, filename):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            filepath = self.prompts_dir / filename
            if filepath.exists():
                with open(filepath, 'r', encoding='utf-8') as f:
                    content = f.read().strip()
                print(f"‚úÖ Loaded prompt: {filename}")
                return content
            else:
                print(f"‚ö†Ô∏è Prompt file not found: {filename}")
                return ""
        except Exception as e:
            print(f"‚ùå Error loading prompt {filename}: {e}")
            return ""
    
    def get_full_analysis_prompt(self, transcript, call_info):
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–≤–æ–Ω–∫–∞
        
        Args:
            transcript (str): –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–≤–æ–Ω–∫–∞
            call_info (dict): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–≤–æ–Ω–∫–µ (–≤—Ä–µ–º—è, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Ç.–¥.)
            
        Returns:
            str: –ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT
        """
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ
        call_details = self._format_call_info(call_info)
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
        full_prompt = f"""{self.prompts['system_context']}

{call_details}

**–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:**
---
{transcript}
---

{self.prompts['classification']}

{self.prompts['manager_codes']}

{self.prompts['detailed_analysis']}

{self.prompts['final_instructions']}
"""
        return full_prompt
    
    def _format_call_info(self, call_info):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        if not call_info:
            return ""
            
        details = []
        if call_info.get('duration'):
            details.append(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {call_info['duration']} —Å–µ–∫")
        if call_info.get('time'):
            details.append(f"–í—Ä–µ–º—è: {call_info['time']}")
        if call_info.get('direction'):
            details.append(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {call_info['direction']}")
            
        if details:
            return f"**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–≤–æ–Ω–∫–µ:**\n" + " | ".join(details) + "\n"
        return ""
    
    def get_alert_template(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —à–∞–±–ª–æ–Ω –¥–ª—è –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        return """üü• **–ü–†–û–î–ê–ñ–ê –£–ü–£–©–ï–ù–ê (–í–ò–ù–ê –ú–ï–ù–ï–î–ñ–ï–†–ê)**

‚öôÔ∏è **–û—à–∏–±–∫–∞:** {error_code} - {error_description}
üìû **–ö–ª–∏–µ–Ω—Ç:** {client_phone}
üìã **–ö–æ–Ω—Ç–µ–∫—Å—Ç:** {context}

‚û°Ô∏è **–ö–∞–∫ –º–æ–∂–Ω–æ –±—ã–ª–æ —Å–ø–∞—Å—Ç–∏:** {solution}

---
*–°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ 29ROZ*"""
    
    def reload_prompts(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        print("üîÑ Reloading prompts...")
        self.prompts.clear()
        self._load_all_prompts()
        print("‚úÖ Prompts reloaded")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ main.py
prompt_loader = PromptLoader()